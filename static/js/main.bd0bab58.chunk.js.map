{"version":3,"sources":["SearchRegions.js","SearchCounty.js","DisplayData.js","TopList.js","components/Chart/Chart.jsx","App.js","index.js"],"names":["SearchRegions","regions","getRegionData","className","onChange","map","usaState","i","key","SearchCounty","counties","getCountyData","DisplayData","props","area","confirmed","toLocaleString","deaths","TopList","top10","renderTop10","item","name","toString","cases","Chart","dailyData","console","log","lineChart","length","data","labels","date","slice","datasets","total","label","borderColor","fill","backgroundColor","style","height","width","App","state","usaData","usaConfirmed","usaDeaths","recovered","countyConfirmed","countyRecover","countyDeaths","bind","this","getData","getGlobalData","getGlobalDailyData","getUSAData","fetch","resp","json","region","province","active","sort","a","b","setState","globalConfirmed","value","globalDeaths","reportDate","e","target","selected","axios","get","selectState","stateData","getCounties","response","status","cities","isCity","city","selectedCounty","countyData","find","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bd0bab58.chunk.js","sourcesContent":["import React from 'react';\n// import axios from 'axios'; // for http requests\n\nimport './App.css';\n\nconst SearchRegions = ({regions, getRegionData}) => {\n\n\n    function renderCountryOptions () { \n        return regions.map((usaState, i) => {\n          return <option key={i}>{usaState}</option>\n        });\n    \n      }\n\n    return(\n        <select className=\"dropdown bg-black bn light-gray\" onChange={getRegionData}>\n        <option>Select State</option>\n          {renderCountryOptions()}\n        </select>\n      )\n\n}\n\nexport default SearchRegions;","import React from 'react';\n// import axios from 'axios'; // for http requests\n\nimport './App.css';\n\nconst SearchCounty = ({counties, getCountyData}) => {\n\n\n    function renderCountryOptions () { \n        return counties.map((usaState, i) => {\n          return <option key={i}>{usaState}</option>\n        });\n    \n      }\n\n    return(\n        <select className=\"dropdown bg-black bn light-gray\" onChange={getCountyData}>\n          <option>Select County</option>\n          {renderCountryOptions()}\n        </select>\n      )\n\n}\n\nexport default SearchCounty;","import React from 'react';\n// import axios from 'axios'; // for http requests\n\nimport './App.css';\n\nexport default function DisplayData(props){\n\n  // https://covid-api.com/api/reports?&iso=USA&region_province=Texas&province_name=Cameron\n\n    return(\n      <div className=\"display-data\">\n        <h2>{props.area}</h2>\n          <div className=\"flex justify-around\">\n            <article className=\"mr3 mw5 mw6-ns br4 hidden ba b--white-10 mv4\">\n              <h3 className=\"f4 bg-dark-gray br3 br--top black-60 mv0 pv2 ph3 orange\">Confirmed Cases</h3>\n              <div className=\"pa3 bt b--black-10\">\n                <h2 className=\"f2 f5-ns lh-copy measure orange\">\n                  {props.confirmed ? props.confirmed.toLocaleString() : '-'}\n                </h2>\n              </div>\n            </article>\n            <article className=\"mr3 mw5 mw6-ns br4 hidden ba b--white-10 mv4\">\n              <h3 className=\"f4 bg-dark-gray br3 br--top black-60 mv0 pv2 ph3 dark-red\">Confirmed Deaths</h3>\n              <div className=\"pa3 bt b--black-10\">\n                <h2 className=\"f2 f5-ns lh-copy measure dark-red\">\n                  {props.deaths ? props.deaths.toLocaleString() : '-'}\n                </h2>\n              </div>\n            </article>\n        </div> \n      </div>\n      )\n\n}\n\n","import React from 'react';\n// import axios from 'axios'; // for http requests\n\nimport './App.css';\n\nconst TopList = ({top10}) => {\n   \n    function renderTop10 () { \n        return top10.map((item) => \n        <tr className=\"bb\" key={item.name.toString()}>\n            <td className=\"pv2 ph3\">{item.name}</td>\n            <td className=\"pv2 ph3\">{item.cases}</td>\n            <td className=\"pv2 ph3\">{item.deaths}</td>\n        </tr>\n      );\n       \n    }\n    renderTop10();\n\n    return(\n        <div className='top-list'>\n            <h2 className='mb3'>Top 10</h2>         \n            <table className=\"collapse ba br2 b--black-10 pv2 ph3 bg-light-gray gray tl center\">\n                <tbody>\n                    <tr className=\"bb bg-gray light-gray\">\n                        <th className=\"pv2 ph3 tl f6 fw6 ttu\">U.S. State</th>\n                        <th className=\"tr f6 ttu fw6 pv2 ph3\">Cases</th>\n                        <th className=\"tr f6 ttu fw6 pv2 ph3\">Deaths</th>\n                    </tr>\n                    {renderTop10()}\n                </tbody>\n            </table>\n        </div>\n      )\n}\n\nexport default TopList;","import React  from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\n\nconst Chart = ({dailyData}) => {\n    console.log(dailyData);\n\n    const lineChart = (\n      dailyData.length ? (\n        <Line\n          data={{\n            labels: dailyData.map(({ date }) => date.slice(5, 10)),\n            datasets: [{\n              data: dailyData.map(({ confirmed }) => confirmed.total),\n              label: 'Infected',\n              borderColor: '#3333ff',\n              fill: true,\n            }, {\n              data: dailyData.map(({deaths}) => deaths.total),\n              label: 'Deaths',\n              borderColor: 'red',\n              backgroundColor: 'rgba(255, 0, 0, 0.5)',\n              fill: true,\n            }]\n          }}\n        />\n      ) : null\n    );\n  \n    return (\n      <div className='center mv3' style={{height:'auto', width:'60vw'}}>\n        {/* <h1>Line Chart Goes Here...</h1> */}\n        {lineChart}\n      </div>\n    );\n  }\n  \n  export default Chart;","import React from 'react';\nimport axios from 'axios'; // for http requests\nimport SearchRegions from './SearchRegions';\nimport SearchCounty from './SearchCounty';\nimport DisplayData from './DisplayData';\nimport TopList from './TopList';\nimport Chart from './components/Chart/Chart';\nimport './App.css';\n\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.getRegionData = this.getRegionData.bind(this);\n    this.getCountyData = this.getCountyData.bind(this);\n  }\n\n  state = {\n    usaData: {},\n    top10: [],\n    dailyData: [],\n    usaConfirmed: 0,\n    usaDeaths: 0,\n    confirmed: 0,\n    recovered: 0,\n    deaths: 0,\n    regions: [],\n    usaState: 0,\n    counties: [],\n    countyConfirmed: 0,\n    countyRecover: 0,\n    countyDeaths: 0\n  }\n\n  componentDidMount() {\n    this.getData();\n    this.getGlobalData();\n    this.getGlobalDailyData();\n    this.getUSAData();\n\n  }\n\n  // https://covid-api.com/api/reports?&iso=USA&region_province=Texas&province_name=Cameron\n// Global Total: https://covid-api.com/api/reports/total?\n  async getData () {\n    const resp = await fetch(`https://covid-api.com/api/reports?&iso=USA`);\n    const usaData = await resp.json();\n    const regions = usaData.data.map((item) => item.region.province);\n    const top10 = usaData.data.map(item => ({name:item.region.province, cases: item.active, deaths: item.deaths})).sort(function(a, b){\n      return b.cases - a.cases;}).slice(0,10);\n    this.setState({\n      regions,\n      top10,\n      usaData: usaData\n    });\n  }\n  async getGlobalData () {\n    const resp = await fetch(\"https://covid19.mathdro.id/api\");\n    const data = await resp.json();\n    this.setState({\n      globalConfirmed: data.confirmed.value,\n      globalDeaths: data.deaths.value\n    });\n  }\n  // Chart Data\n  async getGlobalDailyData () {\n    const resp = await fetch(\"https://covid19.mathdro.id/api/daily\");\n    const data = await resp.json();\n    console.log(data);\n    const dailyData = data.map(item => ({confirmed:item.confirmed, deaths: item.deaths, date: item.reportDate}));\n    console.log(dailyData);\n    this.setState({\n      dailyData,\n    });\n  }\n  async getUSAData () {\n    const resp = await fetch(\"https://covid19.mathdro.id/api/countries/USA\");\n    const data = await resp.json();\n    this.setState({\n      usaConfirmed: data.confirmed.value,\n      usaDeaths: data.deaths.value\n    });\n  }\n\n  async getRegionData(e) {\n    if (e.target.value === 'USA') {\n      return this.getData();\n    }\n    try {\n      const selected = e.target.value;\n      const selectState = await axios.get(`https://covid-api.com/api/reports?&iso=USA&region_province=${selected}`);\n      console.log(selectState);\n      console.log(selected);\n      const stateData = selectState.data.data[0];\n      this.setState({\n        confirmed: stateData.confirmed,\n        active: stateData.active,\n        deaths: stateData.deaths,\n        usaState:selected,\n      });\n\n      this.getCounties();\n      \n    }\n    catch (err) {\n      if(err.response.status === 404){\n      this.setState({\n        confirmed: 'No Data',\n        recovered: 'No Data',\n        deaths: 'No Data',\n      });\n    }\n    }   \n  }\n\n  async getCounties () {\n    const resp = await fetch(`https://covid-api.com/api/reports?&iso=USA&region_province=${this.state.usaState}`);\n    const stateData = await resp.json();\n    const counties = stateData.data[0].region.cities.map((item) => item.name);\n    this.setState({\n      counties\n    });\n    // console.log(this.state.counties);\n  }\n\nasync getCountyData(e) {\n  const selectedCounty = e.target.value;\n  const resp = await fetch(`https://covid-api.com/api/reports?&iso=USA&region_province=${this.state.usaState}`);\n  const regions = await resp.json();\n  const cities = regions.data[0].region.cities;\n  \n  function isCity(city) {\n    return city.name === selectedCounty;\n  }\n  const countyData = cities.find(isCity);\n  console.log(countyData);\n  this.setState({\n    countyConfirmed: countyData.confirmed,\n    countyDeaths: countyData.deaths\n  });\n  console.log(`Confirmed:${this.state.countyConfirmed} Deaths: ${this.state.countyDeaths}`)\n  \n}\n\nrender () {\n  return(\n    <div className=\"container\">\n      <h1 className=\"bg-dark-gray white\">Covid-19 Data</h1>\n      <div className='flex flex-wrap justify-around'>\n        <DisplayData area={'Global'} confirmed={this.state.globalConfirmed} active={this.state.active} deaths={this.state.globalDeaths}/>\n        <DisplayData area={'United States'} confirmed={this.state.usaConfirmed} active={this.state.active} deaths={this.state.usaDeaths}/>\n      </div>\n      <Chart className='pa5' dailyData={this.state.dailyData} />\n      <TopList top10={this.state.top10} />\n\n      \n      <SearchRegions regions={this.state.regions} getRegionData={this.getRegionData}/>\n      <DisplayData area={this.state.usaState} confirmed={this.state.confirmed} active={this.state.active} deaths={this.state.deaths}/>\n      <SearchCounty className=\"ml5\" counties={this.state.counties} getCountyData={this.getCountyData}/>\n      <DisplayData area={`County`} confirmed={this.state.countyConfirmed} active='no data' deaths={this.state.countyDeaths}/>\n    </div>\n    )\n}\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\nimport 'tachyons'; \n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// export default class App extends React.Component {\n//   render() {\n//     return \n//   }\n// }\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}