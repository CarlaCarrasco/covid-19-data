{"version":3,"sources":["SearchRegions.js","SearchCounty.js","DisplayData.js","TopList.js","App.js","index.js"],"names":["SearchRegions","regions","getRegionData","className","onChange","map","usaState","i","key","SearchCounty","counties","getCountyData","DisplayData","props","area","confirmed","deaths","TopList","top10","renderTop10","item","name","toString","cases","App","state","usaData","globalConfirmed","globalDeaths","usaConfirmed","usaDeaths","recovered","countyConfirmed","countyRecover","countyDeaths","bind","this","getData","getGlobalData","getUSAData","fetch","resp","json","console","log","data","region","province","active","sort","a","b","slice","setState","value","e","target","selected","axios","get","selectState","stateData","getCounties","response","status","cities","isCity","city","selectedCounty","countyData","find","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.32e6c967.chunk.js","sourcesContent":["import React from 'react';\n// import axios from 'axios'; // for http requests\n\nimport './App.css';\n\nconst SearchRegions = ({regions, getRegionData}) => {\n\n\n    function renderCountryOptions () { \n        return regions.map((usaState, i) => {\n          return <option key={i}>{usaState}</option>\n        });\n    \n      }\n\n    return(\n        <select className=\"dropdown bg-black bn light-gray\" onChange={getRegionData}>\n        <option>Select State</option>\n          {renderCountryOptions()}\n        </select>\n      )\n\n}\n\nexport default SearchRegions;","import React from 'react';\n// import axios from 'axios'; // for http requests\n\nimport './App.css';\n\nconst SearchCounty = ({counties, getCountyData}) => {\n\n\n    function renderCountryOptions () { \n        return counties.map((usaState, i) => {\n          return <option key={i}>{usaState}</option>\n        });\n    \n      }\n\n    return(\n        <select className=\"dropdown bg-black bn light-gray\" onChange={getCountyData}>\n          <option>Select County</option>\n          {renderCountryOptions()}\n        </select>\n      )\n\n}\n\nexport default SearchCounty;","import React from 'react';\n// import axios from 'axios'; // for http requests\n\nimport './App.css';\n\nexport default function DisplayData(props){\n\n  // https://covid-api.com/api/reports?&iso=USA&region_province=Texas&province_name=Cameron\n\n    return(\n      <div className=\"display-data\">\n        <h2>{props.area}</h2>\n          <div className=\"flex\">\n            <article className=\"center mw5 mw6-ns br4 hidden ba b--white-10 mv4\">\n              <h3 className=\"f4 bg-dark-gray br3 br--top black-60 mv0 pv2 ph3 orange\">Confirmed Cases</h3>\n              <div className=\"pa3 bt b--black-10\">\n                <h2 className=\"f2 f5-ns lh-copy measure orange\">\n                  {props.confirmed}\n                </h2>\n              </div>\n            </article>\n            <article className=\"center mw5 mw6-ns br4 hidden ba b--white-10 mv4\">\n              <h3 className=\"f4 bg-dark-gray br3 br--top black-60 mv0 pv2 ph3 dark-red\">Confirmed Deaths</h3>\n              <div className=\"pa3 bt b--black-10\">\n                <h2 className=\"f2 f5-ns lh-copy measure dark-red\">\n                  {props.deaths}\n                </h2>\n              </div>\n            </article>\n        </div> \n      </div>\n      )\n\n}\n\n","import React from 'react';\n// import axios from 'axios'; // for http requests\n\nimport './App.css';\n\nconst TopList = ({top10}) => {\n\n    function renderTop10 () { \n        return top10.map((item) => \n        <tr className=\"bb\" key={item.name.toString()}>\n            <td className=\"pv2 ph3\">{item.name}</td>\n            <td className=\"pv2 ph3\">{item.cases}</td>\n            <td className=\"pv2 ph3\">{item.deaths}</td>\n        </tr>\n      );\n    }\n    renderTop10();\n\n    return(\n        <div className='top-list'>\n            <h2 className='mb3'>Top 10</h2>         \n            <table className=\"collapse ba br2 b--black-10 pv2 ph3 bg-light-gray gray tl center\">\n                <tbody>\n                    <tr className=\"bb bg-gray light-gray\">\n                        <th className=\"pv2 ph3 tl f6 fw6 ttu\">U.S. State</th>\n                        <th className=\"tr f6 ttu fw6 pv2 ph3\">Cases</th>\n                        <th className=\"tr f6 ttu fw6 pv2 ph3\">Deaths</th>\n                    </tr>\n                    {renderTop10()}\n                </tbody>\n            </table>\n        </div>\n      )\n}\n\nexport default TopList;","import React from 'react';\nimport axios from 'axios'; // for http requests\nimport SearchRegions from './SearchRegions';\nimport SearchCounty from './SearchCounty';\nimport DisplayData from './DisplayData';\nimport TopList from './TopList';\nimport './App.css';\n\n\nexport default class App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.getRegionData = this.getRegionData.bind(this);\n    this.getCountyData = this.getCountyData.bind(this);\n  }\n\n  state = {\n    usaData: {},\n    top10: [],\n    globalConfirmed: 0,\n    globalDeaths: 0,\n    usaConfirmed: 0,\n    usaDeaths: 0,\n    confirmed: 0,\n    recovered: 0,\n    deaths: 0,\n    regions: [],\n    usaState: 0,\n    counties: [],\n    countyConfirmed: 0,\n    countyRecover: 0,\n    countyDeaths: 0\n  }\n\n  componentDidMount() {\n    this.getData();\n    this.getGlobalData();\n    this.getUSAData();\n\n  }\n\n  // https://covid-api.com/api/reports?&iso=USA&region_province=Texas&province_name=Cameron\n// Global Total: https://covid-api.com/api/reports/total?\n  async getData () {\n    const resp = await fetch(`https://covid-api.com/api/reports?&iso=USA`);\n    const usaData = await resp.json();\n    console.log(usaData);\n    const regions = usaData.data.map((item) => item.region.province);\n    const top10 = usaData.data.map(item => ({name:item.region.province, cases: item.active, deaths: item.deaths})).sort(function(a, b){\n      return b.cases - a.cases;}).slice(0,10);\n    this.setState({\n      regions,\n      top10,\n      usaData: usaData\n    });\n  }\n  async getGlobalData () {\n    const resp = await fetch(\"https://covid19.mathdro.id/api\");\n    const data = await resp.json();\n    this.setState({\n      globalConfirmed: data.confirmed.value,\n      globalDeaths: data.deaths.value\n    });\n  }\n  \n  async getUSAData () {\n    const resp = await fetch(\"https://covid19.mathdro.id/api/countries/USA\");\n    const data = await resp.json();\n    this.setState({\n      usaConfirmed: data.confirmed.value,\n      usaDeaths: data.deaths.value\n    });\n  }\n\n  async getRegionData(e) {\n    if (e.target.value === 'USA') {\n      return this.getData();\n    }\n    try {\n      const selected = e.target.value;\n      const selectState = await axios.get(`https://covid-api.com/api/reports?&iso=USA&region_province=${selected}`);\n      console.log(selectState);\n      console.log(selected);\n      const stateData = selectState.data.data[0];\n      this.setState({\n        confirmed: stateData.confirmed,\n        active: stateData.active,\n        deaths: stateData.deaths,\n        usaState:selected,\n      });\n\n      this.getCounties();\n      \n    }\n    catch (err) {\n      if(err.response.status === 404){\n      this.setState({\n        confirmed: 'No Data',\n        recovered: 'No Data',\n        deaths: 'No Data',\n      });\n    }\n    }   \n  }\n\n  async getCounties () {\n    const resp = await fetch(`https://covid-api.com/api/reports?&iso=USA&region_province=${this.state.usaState}`);\n    const stateData = await resp.json();\n    const counties = stateData.data[0].region.cities.map((item) => item.name);\n    this.setState({\n      counties\n    });\n    // console.log(this.state.counties);\n  }\n\nasync getCountyData(e) {\n  const selectedCounty = e.target.value;\n  const resp = await fetch(`https://covid-api.com/api/reports?&iso=USA&region_province=${this.state.usaState}`);\n  const regions = await resp.json();\n  const cities = regions.data[0].region.cities;\n  \n  function isCity(city) {\n    return city.name === selectedCounty;\n  }\n  const countyData = cities.find(isCity);\n  console.log(countyData);\n  this.setState({\n    countyConfirmed: countyData.confirmed,\n    countyDeaths: countyData.deaths\n  });\n  console.log(`Confirmed:${this.state.countyConfirmed} Deaths: ${this.state.countyDeaths}`)\n  \n}\n\nrender () {\n  return(\n    <div className=\"container\">\n      <h1>Covid-19 Update</h1>\n      <div className='flex flex-wrap justify-around'>\n        <DisplayData area={'Global'} confirmed={this.state.globalConfirmed} active={this.state.active} deaths={this.state.globalDeaths}/>\n        <DisplayData area={'United States'} confirmed={this.state.usaConfirmed} active={this.state.active} deaths={this.state.usaDeaths}/>\n      </div>\n      \n      <TopList top10={this.state.top10} />\n      <SearchRegions regions={this.state.regions} getRegionData={this.getRegionData}/>\n      <DisplayData area={this.state.usaState} confirmed={this.state.confirmed} active={this.state.active} deaths={this.state.deaths}/>\n      <SearchCounty className=\"ml5\" counties={this.state.counties} getCountyData={this.getCountyData}/>\n      <DisplayData area={`County`} confirmed={this.state.countyConfirmed} active='no data' deaths={this.state.countyDeaths}/>\n    </div>\n    )\n}\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\nimport 'tachyons'; \n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n// import App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// export default class App extends React.Component {\n//   render() {\n//     return \n//   }\n// }\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}